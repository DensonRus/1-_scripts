
#Использовать json
#Использовать logos

Перем Лог;



Процедура Инициализация()
	
	Лог = Логирование.ПолучитьЛог("oscript.lib.download1C");


	ТекстHTTPЗапроса = ПолучитьТекстHTTPЗапросаДляСпискаОбновлений();
	ИмяФайла = ПолучитьФайлСHTTPСервера(ТекстHTTPЗапроса, "http://downloads.1c.ru");
	
	Если ИмяФайла <> Неопределено Тогда
		
		ПутьРаспаковки = КаталогВременныхФайлов();
		РаспаковатьZIP(ИмяФайла, ПутьРаспаковки);
		
		ИмяФайлаСпискаОбновленийПолныйПуть = ПутьРаспаковки + "v8cscdsc.xml";
		
		ТЗ = ПолучитьТаблицуОбновлений(ИмяФайлаСпискаОбновленийПолныйПуть);
		
		Для каждого строкаТаблиц Из ТЗ Цикл
			
			Сообщить(строкаТаблиц.Версия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
КонецПроцедуры




Функция ПолучитьТекстHTTPЗапросаДляСпискаОбновлений(мHTTPПутьКонфигурации=Неопределено)
	
	ТекстHTTPЗапроса = "/ipp/ITSREPV/V8Update/Configs/Accounting/30/83/v8upd11.zip";
	
	Возврат Новый HTTPЗапрос(ТекстHTTPЗапроса);
	
КонецФункции


Функция ПолучитьФайлСHTTPСервера(HTTPЗапрос, мСервер, мПользователь = "", мПароль = "", мТаймаут = 120) Экспорт 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Соединение = Новый HTTPСоединение(мСервер);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
	Исключение
		лог.Ошибка(ОписаниеОшибки() + " параметры " + мСервер + " " + HTTPЗапрос);
		Сообщить("Ошибка при получении файла с сервера обновлений" + ?(HTTPОтвет = Неопределено, "", " Код: " + HTTPОтвет.КодСостояния) + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ИмяВременногоФайла);
		
		ИмяВременногоФайла = Неопределено;
		
	КонецПопытки;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура РаспаковатьZIP(ИмяФайлаZIP, ПутьРаспаковки, мРежимВосстановленияПутейФайловZIP = Неопределено, УдалитьZIPПослеРаспаковки = Истина) Экспорт
	
	Если мРежимВосстановленияПутейФайловZIP = Неопределено Тогда
		мРежимВосстановленияПутейФайловZIP = РежимВосстановленияПутейФайловZIP.НеВосстанавливать
	КонецЕсли;
	
	Попытка
		ЧтениеZip = Новый ЧтениеZipФайла(ИмяФайлаZIP);
		ЧтениеZip.ИзвлечьВсе(ПутьРаспаковки, мРежимВосстановленияПутейФайловZIP);
	Исключение
		Сообщить("Ошибка распаковки архива");
	КонецПопытки;
	
	Если УдалитьZIPПослеРаспаковки = Истина Тогда
		Попытка
			УдалитьФайлы(ИмяФайлаZIP);
		исключение
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуОбновлений(ИмяФайлаЗагрузки) Экспорт
	
	Файл = Новый Файл(ИмяФайлаЗагрузки);
	
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("Конфигурация");
		ТаблицаЗначений.Колонки.Добавить("Версия");
		ТаблицаЗначений.Колонки.Добавить("ПутьКФайлуОбновления");
		ТаблицаЗначений.Колонки.Добавить("РазмерФайлаОбновления");
		ТаблицаЗначений.Колонки.Добавить("ОбновлениеВерсии");
		ТаблицаЗначений.Колонки.Добавить("Скачивать");
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЗагрузки);
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ДатаФормирования = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "v8u:updateList" Тогда
				Прервать;
			Иначе
				
				Конфигурация = ЧтениеXML.ПолучитьАтрибут("configuration");
				
				НоваяСтрока = Неопределено;
				Пока ЧтениеXML.Прочитать() Цикл
					
					Если ЧтениеXML.Имя = "v8u:update" Тогда
						НоваяСтрока = Неопределено;
						Прервать;
					Иначе
						
						Если ЧтениеXML.Имя = "v8u:vendor" Тогда
							ЧтениеXML.Прочитать();
							Поставщик = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:version" Тогда
							ЧтениеXML.Прочитать();
							Версия = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:file" Тогда
							ЧтениеXML.Прочитать();
							ПутьКФайлуОбновления = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:size" Тогда
							ЧтениеXML.Прочитать();
							РазмерФайлаОбновления = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:target" Тогда
							
							ЧтениеXML.Прочитать();
							
							Если НоваяСтрока = Неопределено Тогда 
								
								НоваяСтрока = ТаблицаЗначений.Добавить();
								
								НоваяСтрока.Конфигурация = Конфигурация;
								НоваяСтрока.Версия = Версия;
								НоваяСтрока.ПутьКФайлуОбновления = ПутьКФайлуОбновления;
								НоваяСтрока.РазмерФайлаОбновления = Число(РазмерФайлаОбновления) / 1024 / 1024;
								НоваяСтрока.ОбновлениеВерсии = ЧтениеXML.Значение + "; ";
								НоваяСтрока.Скачивать = Истина;
								
							Иначе
								
								НоваяСтрока.ОбновлениеВерсии = НоваяСтрока.ОбновлениеВерсии + ЧтениеXML.Значение + "; ";
								
							КонецЕсли;
						КонецЕсли;
						
						ЧтениеXML.Прочитать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		
	КонецПопытки;
	
	ТаблицаЗначений.Свернуть("ПутьКФайлуОбновления, Версия, Конфигурация, РазмерФайлаОбновления, ОбновлениеВерсии, Скачивать");
	
	// Отсортируем ТЗ в обратном порядке, чтобы видеть список в привычном виде
	ТаблицаЗначений.Колонки.Добавить("ПорядковыйНомер");
	ПорядковыйНомер = 0;
	Для Каждого ТекСтрока Из ТаблицаЗначений Цикл
		ТекСтрока.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("ПорядковыйНомер Убыв");
	ТаблицаЗначений.Колонки.Удалить("ПорядковыйНомер");
	
	Попытка
		ЧтениеXML.Закрыть();
		УдалитьФайлы(ИмяФайлаЗагрузки);
	Исключение
	КонецПопытки;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Инициализация();